$date
	Tue Apr 09 21:05:12 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! writedata [31:0] $end
$var wire 1 " memwrite $end
$var wire 32 # dataadr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & writedata [31:0] $end
$var wire 32 ' readdata [31:0] $end
$var wire 32 ( pc [31:0] $end
$var wire 1 " memwrite $end
$var wire 32 ) instr [31:0] $end
$var wire 32 * dataadr [31:0] $end
$scope module dmem $end
$var wire 1 $ clk $end
$var wire 32 + rd [31:0] $end
$var wire 1 " we $end
$var wire 32 , wd [31:0] $end
$var wire 32 - a [31:0] $end
$upscope $end
$scope module imem $end
$var wire 6 . a [5:0] $end
$var wire 32 / rd [31:0] $end
$upscope $end
$scope module mips $end
$var wire 1 $ clk $end
$var wire 32 0 instr [31:0] $end
$var wire 32 1 readdata [31:0] $end
$var wire 1 % reset $end
$var wire 1 2 zero $end
$var wire 32 3 writedata [31:0] $end
$var wire 1 4 regwrite $end
$var wire 1 5 regdst $end
$var wire 1 6 pcsrc $end
$var wire 32 7 pc [31:0] $end
$var wire 1 " memwrite $end
$var wire 1 8 memtoreg $end
$var wire 1 9 jump $end
$var wire 1 : alusrc $end
$var wire 32 ; aluout [31:0] $end
$var wire 3 < alucontrol [2:0] $end
$scope module c $end
$var wire 1 $ clk $end
$var wire 6 = funct [5:0] $end
$var wire 6 > op [5:0] $end
$var wire 1 2 zero $end
$var wire 1 4 regwrite $end
$var wire 1 5 regdst $end
$var wire 1 " memwrite $end
$var wire 1 8 memtoreg $end
$var wire 1 9 jump $end
$var wire 1 ? branch $end
$var wire 1 : alusrc $end
$var wire 3 @ aluop [2:0] $end
$var wire 3 A alucontrol [2:0] $end
$var reg 1 6 pcsrc $end
$scope module ad $end
$var wire 6 B funct [5:0] $end
$var wire 3 C aluop [2:0] $end
$var reg 3 D alucontrol [2:0] $end
$scope begin aludecblock $end
$upscope $end
$upscope $end
$scope module md $end
$var wire 1 $ clk $end
$var wire 6 E op [5:0] $end
$var wire 1 4 regwrite $end
$var wire 1 5 regdst $end
$var wire 1 " memwrite $end
$var wire 1 8 memtoreg $end
$var wire 1 9 jump $end
$var wire 1 ? branch $end
$var wire 1 : alusrc $end
$var wire 3 F aluop [2:0] $end
$var reg 10 G controls [9:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 H alucontrol [2:0] $end
$var wire 1 : alusrc $end
$var wire 1 $ clk $end
$var wire 32 I instr [31:0] $end
$var wire 1 9 jump $end
$var wire 1 8 memtoreg $end
$var wire 1 6 pcsrc $end
$var wire 32 J readdata [31:0] $end
$var wire 1 5 regdst $end
$var wire 1 4 regwrite $end
$var wire 1 % reset $end
$var wire 1 2 zero $end
$var wire 5 K writereg [4:0] $end
$var wire 32 L writedata [31:0] $end
$var wire 32 M srcb [31:0] $end
$var wire 32 N srca [31:0] $end
$var wire 32 O signimmsh [31:0] $end
$var wire 32 P signimm [31:0] $end
$var wire 32 Q result [31:0] $end
$var wire 32 R pcplus4 [31:0] $end
$var wire 32 S pcnextbr [31:0] $end
$var wire 32 T pcnext [31:0] $end
$var wire 32 U pcbranch [31:0] $end
$var wire 32 V pc [31:0] $end
$var wire 32 W aluout [31:0] $end
$scope module alu $end
$var wire 3 X alucontrol [2:0] $end
$var wire 32 Y srcb [31:0] $end
$var wire 32 Z srca [31:0] $end
$var reg 32 [ aluout [31:0] $end
$var reg 1 2 zero $end
$scope begin alublock $end
$upscope $end
$upscope $end
$scope module immsh $end
$var wire 32 \ y [31:0] $end
$var wire 32 ] a [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 ^ b [31:0] $end
$var wire 32 _ y [31:0] $end
$var wire 32 ` a [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 a a [31:0] $end
$var wire 32 b b [31:0] $end
$var wire 32 c y [31:0] $end
$upscope $end
$scope module pcbrmux $end
$var wire 32 d d0 [31:0] $end
$var wire 32 e d1 [31:0] $end
$var wire 1 6 s $end
$var wire 32 f y [31:0] $end
$var parameter 32 g WIDTH $end
$upscope $end
$scope module pcmux $end
$var wire 32 h d0 [31:0] $end
$var wire 32 i d1 [31:0] $end
$var wire 1 9 s $end
$var wire 32 j y [31:0] $end
$var parameter 32 k WIDTH $end
$upscope $end
$scope module pcreg $end
$var wire 1 $ clk $end
$var wire 32 l d [31:0] $end
$var wire 1 % reset $end
$var parameter 32 m WIDTH $end
$var reg 32 n q [31:0] $end
$upscope $end
$scope module resmux $end
$var wire 32 o d0 [31:0] $end
$var wire 32 p d1 [31:0] $end
$var wire 1 8 s $end
$var wire 32 q y [31:0] $end
$var parameter 32 r WIDTH $end
$upscope $end
$scope module rf $end
$var wire 1 $ clk $end
$var wire 5 s ra1 [4:0] $end
$var wire 5 t ra2 [4:0] $end
$var wire 32 u wd3 [31:0] $end
$var wire 1 4 we3 $end
$var wire 5 v wa3 [4:0] $end
$var wire 32 w rd2 [31:0] $end
$var wire 32 x rd1 [31:0] $end
$upscope $end
$scope module se $end
$var wire 16 y a [15:0] $end
$var wire 32 z y [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 { d0 [31:0] $end
$var wire 32 | d1 [31:0] $end
$var wire 1 : s $end
$var wire 32 } y [31:0] $end
$var parameter 32 ~ WIDTH $end
$upscope $end
$scope module wrmux $end
$var wire 5 !" d0 [4:0] $end
$var wire 5 "" d1 [4:0] $end
$var wire 1 5 s $end
$var wire 5 #" y [4:0] $end
$var parameter 32 $" WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 $"
b100000 ~
b100000 r
b100000 m
b100000 k
b100000 g
$end
#0
$dumpvars
b10 #"
b0 ""
b10 !"
b111 }
b111 |
bx {
b111 z
b111 y
b0 x
bx w
b10 v
b111 u
b10 t
b0 s
b111 q
bx p
b111 o
b0 n
b100 l
b100 j
b10000000000000011100 i
b100 h
b100 f
b100000 e
b100 d
b100000 c
b11100 b
b100 a
b0 `
b100 _
b100 ^
b111 ]
b11100 \
b111 [
b0 Z
b111 Y
b0 X
b111 W
b0 V
b100000 U
b100 T
b100 S
b100 R
b111 Q
b111 P
b11100 O
b0 N
b111 M
bx L
b10 K
bx J
b100000000000100000000000000111 I
b0 H
b1010000000 G
b0 F
b1000 E
b0 D
b0 C
b111 B
b0 A
b0 @
0?
b1000 >
b111 =
b0 <
b111 ;
1:
09
08
b0 7
06
05
14
bx 3
02
bx 1
b100000000000100000000000000111 0
b100000000000100000000000000111 /
b0 .
b111 -
bx ,
bx +
b111 *
b100000000000100000000000000111 )
b0 (
bx '
bx &
1%
0$
b111 #
0"
bx !
$end
#5
b111 !
b111 &
b111 ,
b111 3
b111 L
b111 w
b111 {
1$
#10
0$
#15
1$
#20
0$
#22
0%
#25
b1100 Q
b1100 q
b1100 u
b1100 #
b1100 *
b1100 -
b1100 ;
b1100 W
b1100 [
b1100 o
bx !
bx &
bx ,
bx 3
bx L
bx w
bx {
b101 K
b101 v
b101 #"
b1100 M
b1100 Y
b1100 }
b110000 O
b110000 \
b110000 b
b1000 T
b1000 j
b1000 l
b1100 =
b1100 B
b101000000000000110000 i
b101 t
b101 !"
b1100 P
b1100 ]
b1100 z
b1100 |
b1100 y
b1000 S
b1000 f
b1000 h
b100000000001010000000000001100 )
b100000000001010000000000001100 /
b100000000001010000000000001100 0
b100000000001010000000000001100 I
b1 .
b111000 U
b111000 c
b111000 e
b1000 R
b1000 _
b1000 a
b1000 d
b100 (
b100 7
b100 V
b100 `
b100 n
1$
#30
0$
#35
b1 <
b1 A
b1 D
b1 H
b1 X
b11111111111111111111111111111011 Q
b11111111111111111111111111111011 q
b11111111111111111111111111111011 u
04
0:
1?
b1 @
b1 C
b1 F
b11111111111111111111111111111011 #
b11111111111111111111111111111011 *
b11111111111111111111111111111011 -
b11111111111111111111111111111011 ;
b11111111111111111111111111111011 W
b11111111111111111111111111111011 [
b11111111111111111111111111111011 o
b1000001 G
b111 N
b111 Z
b111 x
b1100 M
b1100 Y
b1100 }
b100 O
b100 \
b100 b
b1100 T
b1100 j
b1100 l
b101 >
b101 E
b1 =
b1 B
b1000101000000000000000100 i
b10 s
b1 P
b1 ]
b1 z
b1 |
b1 y
b1100 !
b1100 &
b1100 ,
b1100 3
b1100 L
b1100 w
b1100 {
b1100 S
b1100 f
b1100 h
b10100010001010000000000000001 )
b10100010001010000000000000001 /
b10100010001010000000000000001 0
b10100010001010000000000000001 I
b10 .
b10000 U
b10000 c
b10000 e
b1100 R
b1100 _
b1100 a
b1100 d
b1000 (
b1000 7
b1000 V
b1000 `
b1000 n
1$
#40
0$
#45
b1010100 M
b1010100 Y
b1010100 }
b0 <
b0 A
b0 D
b0 H
b0 X
b1010100 Q
b1010100 q
b1010100 u
1:
0?
1"
b0 @
b0 C
b0 F
b1010100 #
b1010100 *
b1010100 -
b1010100 ;
b1010100 W
b1010100 [
b1010100 o
b10100000 G
b0 N
b0 Z
b0 x
b101010000 O
b101010000 \
b101010000 b
b10000 T
b10000 j
b10000 l
b101011 >
b101011 E
b10100 =
b10100 B
b101000000000101010000 i
b0 s
b1010100 P
b1010100 ]
b1010100 z
b1010100 |
b1010100 y
b10000 S
b10000 f
b10000 h
b10101100000001010000000001010100 )
b10101100000001010000000001010100 /
b10101100000001010000000001010100 0
b10101100000001010000000001010100 I
b11 .
b101100000 U
b101100000 c
b101100000 e
b10000 R
b10000 _
b10000 a
b10000 d
b1100 (
b1100 7
b1100 V
b1100 `
b1100 n
1$
#50
0$
